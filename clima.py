# -*- coding: utf-8 -*-
"""avaliação einsten.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17A_59YExCE0l8-686w3HS4Xfw6nPFFwu

# Cenário:
Em nosso exemplo iremos trabalhar com a API aberta oferecida pelo INPE que obtém dados da
Previsão de Tempo, IUV e Ondas em XML.
A API  pode  ser acessada  pelo link:
http://servicos.cptec.inpe.br/XML/
Realize quantas e da forma que conseguir as tarefas a seguir:


# Tarefa 1:
Desenvolva um front-end que obtenha e apresente a previsão do tempo para todas as capitais da região
Sudeste.
## Dicas e Sugestões:
Desenvolva o código demonstrando seus conhecimentos quanto a modularização, organização e
padrões de projeto.
De preferência, utilizar o framework Angular para o desenvolvimento da solução.

#Entrega 
# i)  Entregue o código produzido através de arquivo compactado.
# ii) Entregue uma imagem apresentando a exibição das previsões da região sudeste no front-end.
"""


from urllib.request import urlopen
from xml.etree.ElementTree import parse
import xml.etree.ElementTree as ET
import pandas as pd
from datetime import datetime
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
import pandas as pd
from tqdm import tqdm
import xmltodict
import seaborn as sea
import matplotlib.pyplot as plt
import ipywidgets as widgets
import io
import base64
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///meteorologico.db'
db = SQLAlchemy(app)


"""
Classe para capturar informações meteorológicas
"""
class clima:
    def __init__(self):
        pass
        
    def recupera_condicoes_meteorologicas(self, ):
        file = urlopen('http://servicos.cptec.inpe.br/XML/capitais/condicoesAtuais.xml')
        data = file.read()
        file.close()
        data = xmltodict.parse(data)
        capitais_  = {'SBRJ':'Rio de Janeiro', 
                    'SBSP':'São Paulo', 
                    'SBVT': 'Vitória', 
                    'SBCF':'Belo Horizonte' }
        valores = []
        for cap in data['capitais']['metar']:  
          if cap['codigo'] in capitais_.keys():
            codigo = cap['codigo']
            atualizacao  = cap['atualizacao']
            pressao =  cap['pressao']
            temperatura=  cap['temperatura']      
            tempo=  cap['tempo']
            tempo_desc=  cap['tempo_desc']
            #print(tell_me_about(tempo_desc.decode("iso-8859-1")))
            tempo_desc = bytes(tempo_desc,'iso-8859-1').decode('utf-8')
            umidade=  cap['umidade']
            vento_dir=  cap['vento_dir']
            vento_int=  cap['vento_int']
            intensidade=  cap['intensidade']
            
            valores.append([capitais_[codigo],
                            atualizacao,
                            pressao,
                            temperatura,                            
                            tempo_desc,
                            umidade,
                            vento_dir,
                            vento_int,
                            intensidade])
        #[('nome', 'Vitória'), ('uf', 'ES'), ('id', '246')])]
        df = pd.DataFrame(valores, columns=['codigo', 
                                          'atualizacao',
                                              'pressao',
                                              'temperatura',                                        
                                              'tempo_desc',
                                              'umidade',
                                              'vento_dir',
                                              'vento_int',
                                              'intensidade'])
        df['atualizacao'] = pd.to_datetime(df['atualizacao'])
        self.dados = df.copy()


    def atualiza_banco(self, ):
      for v in self.dados.values:  
        registro = registro_meteorologico(capital  = v[0],
                                        atualizacao = v[1],
                                        pressao = v[2],
                                        temperatura = v[3],                                    
                                        tempo_desc = v[4],
                                        umidade = v[5],
                                        vento_dir = v[6],
                                        vento_int = v[7],
                                        intensidade  = v[8])
        db.session.add(registro)
      db.session.commit()
      
    def load_data_from_database(self, ):
        valores = []
    
        for reg in registro_meteorologico.query.all():
          valores.append({'id':reg.id,
                          'capital'  : reg.capital,
                          'atualizacao' : reg.atualizacao.strftime("%Y/%m/%d, %H:%M:%S"),
                          'pressao' : reg.pressao,
                          'temperatura' : reg.temperatura,
                          'tempo_desc' : reg.tempo_desc,
                          'umidade' : reg.umidade,
                          'vento_dir' : reg.vento_dir,
                          'vento_int' : reg.vento_int,
                          'intensidade'  : reg.intensidade})
        return pd.DataFrame(valores).tail(4)

   
                                                                    
'''
Classe de Persistencia Interface com os Dados
'''
class registro_meteorologico(db.Model):
  __tablename__ = "registro_meteorologico"
  id = db.Column(db.Integer, primary_key=True)  
  capital = db.Column(db.String(30))
  atualizacao = db.Column(db.DateTime)
  pressao = db.Column(db.Integer)
  temperatura =   db.Column(db.Integer)
  tempo_desc = db.Column(db.String(30))
  umidade = db.Column(db.Integer)
  vento_dir  = db.Column(db.Integer)
  vento_int = db.Column(db.Integer)
  intensidade = db.Column(db.String(10))

  def __repr__(self):
    return str({'id': self.id, 
                'capital' : self.capital,
                'atualizacao': self.atualizacao.strftime("%Y/%m/%d, %H:%M:%S")})

import os.path

if os.path.isfile('meteorologico.db'):
  print ("File exist")
else:  
    db.create_all()
    print ("File created")

"""
@app.route('/')
def home():
    return render_template("index.html")

@app.route('/visualize')
def visualize():
  fig,ax = plt.subplots(figsize=(16.18, 10))
  ax=sea.set_style(style='darkgrid')
  filtra_cidade
  canvas=FigureCanvas(fig)
  img=io.BytesIO()
  fig.savefig(img)
  img.seek(0)
  return send_file(img, mimetype='img/png')
"""



#clima.atualiza_banco(clima.recupera_condicoes_meteorologicas())

#load_data_from_database().hist()

#filtra_cidade()



def filtra_cidade(cidade=""):
  aux = load_data_from_database().drop_duplicates(subset=['capital','atualizacao'])
  if len(cidade)==0:
    plota_dados(aux)
    return aux
  else:
    plota_dados(aux[aux['capital']==cidade].tail(4).copy())
    plot_dados_modelos(aux[aux['capital']==cidade], cidade)

    return aux[aux['capital']==cidade].copy()

def plota_dados(dados):
  
  plt.figure(figsize=(9.08,5))
  sea.lineplot(data=dados.tail(12), x='atualizacao', y='temperatura', hue='capital')
  plt.ylabel('°C')
  plt.xlabel('Data')
  plt.title('Observatório Climático')
  plt.show()


def plot_dados_modelos(dados, cidade):
  for variavel in ['umidade', 'pressao', 'vento_int']:    
    sea.lmplot(data=dados[dados['capital']==cidade], x=variavel, y='temperatura')
    plt.ylabel('°C')
    plt.xlabel(variavel)
    plt.title('Observatório Climático: '+cidade)
    plt.show()
    
    sea.jointplot(data=dados[dados['capital']==cidade], x=variavel, y='temperatura', kind='kde')
    plt.ylabel('°C')
    plt.xlabel(variavel)
    plt.title('Observatório Climático: '+cidade)
    plt.show()
    print("-------------------------------------------------------------------")
  
   


#wid_capital = widgets.Dropdown(name='capital')
#wid_capital.options =[''] + list(load_data_from_database()['capital'].unique())
#interactive_plot = widgets.interactive(filtra_cidade,cidade=wid_capital)

#output = interactive_plot.children[-1]
#output.layout.height = '350'

#interactive_plot



#!pip install flask-ngrok --quiet
#from flask_ngrok import run_with_ngrok

#s = registro_meteorologico.query.all()

#for cadaUm in s:
#  if cadaUm.id >=9:
#    db.session.delete(cadaUm)
#  db.session.commit()
#load_data_from_database().tail(4)

"""# Tarefa 2:
Desenvolva um schema de banco de dados para armazenar as informações de previsões do tempo dessa
API.
Dicas e Sugestões:
Utilize alguma ferramenta visual como o dbdesign: https://www.dbdesigner.net/

#Entrega
* Entregue uma imagem apresentando o schema.

"""

#from IPython.display import Image
##Image(filename='tabela_clima.jpeg')

#db.metadata.tables['registro_meteorologico']

"""# Tarefa 3:
Critique os métodos que você utilizou dessa API. De que fo rma eles poderiam ser melhores?

## Dicas e Sugestões:
Quais parâmetros/atributos/informações/tecnologias que poderiam ser aplicados para a melhoria
desses métodos.

# Entrega
* Entregue um documento texto com essas sugestões.

# Tarefa 4:
Desenhe uma arquitetura de back-end descrevendo as camadas, tecnologias e recursos que você
considera a ideal para um sistema web que apresente dados de Previsão de Tempo, IUV e Ondas.
## Dicas e Sugestões:
* Escolha uma plataforma e frameworks tais como Java/Spring, Python/Flask, .NET/, etc.
* De preferência para JAVA ou Python.

# Entrega
* Entregue um documento apresentado essa arquitetura.
Ao finalizar envie os arquivos por e-mail para cassio.reginato@einstein.br com o título: Avaliação DEV
"""